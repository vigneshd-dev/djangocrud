name: üöÄ Auto Semantic Versioning & Tagging (PR‚ÄëBased)

# Give the runner permission to push tags back
permissions:
  contents: write

on:
  pull_request:
    branches:
      - main
      - release
      - develop
      - 'hotfix/*'
      - 'bugfix/*'
    types: [closed]

jobs:
  auto-tag:
    # Only run if the PR was merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout with your PAT to override the default GITHUB_TOKEN
      - name: Checkout with GH_PAT
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          persist-credentials: false
          fetch-depth: 0

      # 2Ô∏è‚É£ Look up the latest tag (or default to 0.0.0)
      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest=$latest" >> $GITHUB_OUTPUT

      # 3Ô∏è‚É£ Decide whether to bump major, minor, or patch
      - name: Determine next version
        id: bump_version
        run: |
          latest="${{ steps.get_latest_tag.outputs.latest }}"
          IFS='.' read -r major minor patch <<< "$latest"

          base="${{ github.base_ref }}"   # branch the PR was merged *into*
          head="${{ github.head_ref }}"   # branch the PR came *from*

          echo "Base branch: $base"
          echo "Head branch: $head"

          if [[ "$base" == "main" ]]; then
            # Merges into main are major releases
            major=$((major + 1)); minor=0; patch=0

          elif [[ "$base" == "release" ]]; then
            # Merges into release bump minor
            minor=$((minor + 1)); patch=0

          elif [[ "$head" == hotfix/* || "$head" == bugfix/* ]]; then
            # PRs *from* hotfix/* or bugfix/* bump patch
            patch=$((patch + 1))

          else
            # All other PRs (features into develop) bump minor
            minor=$((minor + 1)); patch=0
          fi

          new_tag="$major.$minor.$patch"
          echo "tag=$new_tag" >> $GITHUB_OUTPUT
          echo "Next version tag: $new_tag"

      # 4Ô∏è‚É£ Configure Git identity for tagging
      - name: Configure Git
        run: |
          git config user.name "vigneshd.dev"
          git config user.email "vigneshd.dev@gmail.com"

      # 5Ô∏è‚É£ Create and push the new tag
      - name: Create & push tag
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          tag="${{ steps.bump_version.outputs.tag }}"
          echo "Creating tag: $tag"

          # Remove any extraheader so GITHUB_TOKEN isn't used
          git config --local --unset-all http.https://github.com/.extraheader || true

          git tag "$tag"
          git push https://vigneshd-dev:${GH_PAT}@github.com/${{ github.repository }} "refs/tags/$tag"
          echo "‚úÖ Pushed tag: $tag"
